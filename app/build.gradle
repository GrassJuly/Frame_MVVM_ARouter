apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    defaultConfig {
        applicationId rootProject.ext.android.applicationId
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }

    signingConfigs {
        config {
            storeFile file("wineworld.keystore")
            storePassword "Qy15120023256"
            keyAlias "wineworld"
            keyPassword "Qy15120023256"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
            if (isBuildModule.toBoolean()) {
                //独立运行
                manifest.srcFile 'src/main/alone/AndroidManifest.xml'
            } else {
                //合并到宿主
                manifest.srcFile 'src/main/AndroidManifest.xml'
                resources {
                    //正式版本时，排除debug文件夹下所有调试文件
                    exclude 'src/debug/*'
                }
            }
        }
    }
    //统一资源前缀，规范资源引用
    resourcePrefix "app_"
    dataBinding {
        enabled true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
            buildConfigField "boolean", "LOG_FLAG_TYPE", "false"
            buildConfigField "boolean", "LOG_DEBUG", "false"
        }
        debug {
            signingConfig signingConfigs.config
            buildConfigField "boolean", "LOG_DEBUG", "true"
        }
    }
    //修改生成的apk名字
    applicationVariants.all { variant ->
        if (variant.buildType.name.equals('release')) {
            variant.outputs.each { output ->
                def buildName
                def releaseApkName
                variant.productFlavors.each { product ->
                    buildName = product.name
                }
                releaseApkName = rootProject.ext.android.appName + '_' + getDate() + '_v' + defaultConfig.versionName + '_' + buildName + '.apk'
//                output.outputFile = new File(oldFile.parent, releaseApkName)
                variant.outputs.all {
                    outputFileName = releaseApkName
                }

            }
        }
    }
}
kapt {
    generateStubs = true
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //宿主项目中判断组件是否需要独立运行
    if (isBuildModule.toBoolean()) {
        //组件独立运行时，宿主项目直接依赖基础库，避免编译错误
        implementation project(':library-base')
    } else {
        //主业务模块
        implementation project(':module-main')
        //身份验证模块
        implementation project(':module-sign')
        //首页模块
        implementation project(':module-home')
        //分类模块
        implementation project(':module-sort')
        //订单模块
        implementation project(':module-order')
        //用户模块
        implementation project(':module-user')
        //地图定位模块
        implementation project(':module-local')
    }
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    return formattedDate
}
